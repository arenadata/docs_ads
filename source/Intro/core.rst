Концепция потоков NiFi
=======================

Основные концепции **NiFi** тесно связаны с основными идеями потокового программирования (`Flow Based Programming -- FBP <https://en.wikipedia.org/wiki/Flow-based_programming#Concepts>`_). Далее в таблице приведены некоторые из основных концепций **NiFi** и их сопоставление с **FBP**.

.. csv-table:: Сопоставление концепций NiFi и FBP
   :header: "NiFi Term", "FBP Term", "Орписание"
   :widths: 25, 25, 50

   "FlowFile", "Information Packet", "FlowFile представляет каждый объект, перемещающийся через систему, и для каждого из них NiFi отслеживает карту строк атрибута пары ключ/значение и связанного с ним содержимого с количеством байт от нуля и больше"
   "FlowFile Processor", "Black Box", "Выполнение работы процессорами. В терминах `eip <https://www.enterpriseintegrationpatterns.com/>`_ процессор выполняет некоторую комбинацию маршрутизации, преобразования и посредничества данных между системами. Процессоры имеют доступ к атрибутам предоставленного FlowFile и его контенту. Процессоры могут работать на ноль и более FlowFiles с коммитом или откатом в результате работы"
   "Connection", "Bounded Buffer", "Фактическая связь между процессорами. Соединения действуют как очереди и позволяют разным процессам взаимодействовать с разной скоростью. Очереди могут быть распределены по приоритетам и иметь верхние границы нагрузки, обеспечивающие обратное давление"
   "Flow Controller", "Scheduler", "Контроллер потока хранит знание, как соединяются процессы, управляются потоки и их распределения, используемые всеми процессами. Flow Controller действует как брокер, облегчающий обмен FlowFiles между процессорами"
   "Process Group", "subnet", "Группа процессов представляет собой определенный набор процессов и их соединений, которые могут принимать данные через входные порты и отправлять данные через выходные порты. Таким образом, группы процессов позволяют создавать совершенно новые компоненты просто по составу других компонентов"

Такая модель проектирования (схожая с `seda <https://www.mdw.la/papers/seda-sosp01.pdf>`_) обеспечивает множество преимуществ, которые способствуют **NiFi** в эффективности по созданию мощных и масштабируемых потоков данных, например:

+ Хорошо подходит для визуального создания и управления графиками процессоров;
+ По своей сути является асинхронной, что обеспечивает очень высокую пропускную способность и естественную буферизацию, даже при колебаниях скорости обработки и потока;
+ Обеспечивает высококонкурентную модель без необходимости участия разработчика в вопросах типичных сложностей параллелизма;
+ Способствует развитию связанных и слабосвязанных компонентов, которые в последствии могут быть повторно использованы в других контекстах и способствовать тестированию;
+ Соединения с ограниченными ресурсами делают такие критические функции, как обратное давление и сброс давления, закономерными и интуитивно понятными;
+ Обработка ошибок становится с ожидаемым успешным результатом конкретного сценария процесса (happy-path), а не грубый catch-all;
+ Точки, по которым данные входят и выходят из системы, а также ход потоков, понятны и легко отслеживаются.

